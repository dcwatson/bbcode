{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<p>If you need only the built-in tags, you can simply use the global default parser:</p> <pre><code>import bbcode\nhtml = bbcode.render_html(text)\n</code></pre> <p>Basic formatters can be added using simple string substitution. For instance, adding a [wiki] tag for wikipedia links may look like:</p> <pre><code>parser = bbcode.Parser()\nparser.add_simple_formatter('wiki', '&lt;a href=\"http://wikipedia.org/wiki/%(value)s\"&gt;%(value)s&lt;/a&gt;')\n</code></pre>"},{"location":"#custom-parser-objects","title":"Custom Parser Objects","text":"<p>The bbcode <code>Parser</code> class takes several options when creating:</p> <ul> <li><code>newline=\"&lt;br /&gt;\"</code> - What to replace newlines with.</li> <li><code>install_defaults=True</code> - Whether to install the default tag formatters. If <code>False</code>, you will need to specify add tag   formatters yourself.</li> <li><code>escape_html=True</code> - Whether to escape special HTML characters (&lt;, &gt;, &amp;, \", and '). Replacements are specified as   tuples in <code>Parser.REPLACE_ESCAPE</code>.</li> <li><code>replace_links=True</code> - Whether to automatically create HTML links for URLs in the source text.</li> <li><code>replace_cosmetic=True</code> - Whether to perform cosmetic replacements for ---, --, ..., (c), (reg), and (tm).   Replacements are specified as tuples in <code>Parser.REPLACE_COSMETIC</code>.</li> <li><code>tag_opener=\"[\"</code> - The opening tag character(s).</li> <li><code>tag_closer=\"]\"</code> - The closing tag character(s).</li> <li><code>linker=None</code> - A function that takes a regular expression match object (and optionally the <code>Parser</code> context) and   returns an HTML replacement string.</li> <li><code>linker_takes_context=False</code> - Whether the linker function accepts a second <code>context</code> parameter. If <code>True</code>, the linker   function will be passed the context sent to <code>Parser.format</code>.</li> <li><code>drop_unrecognized=False</code> - Whether to drop unrecognized (but valid) tags. The default is to leave the tags   (unformatted) in the output.</li> <li><code>default_context={}</code> - A dictionary to use as the default context when rendering. Keywords arguments passed to   <code>format</code> will supercede these defaults.</li> <li><code>url_template=\"&lt;a rel=\"nofollow\" href=\"{href}\"&gt;{text}&lt;/a&gt;\"</code> - The URL template allows you to customize how urls are   transformaed into HTML. For instance, to add \"target='_blank'\", you may use something like:   <code>\"&lt;a href=\"{href}\" target=\"_blank\"&gt;{text}&lt;/a&gt;\"</code></li> </ul>"},{"location":"#customizing-the-linker","title":"Customizing the Linker","text":"<p>The linker is a function that gets called to replace URLs with markup. It takes one or two arguments (depending on whether you set <code>linker_takes_context</code>), and might look like this:</p> <pre><code>def my_linker(url):\n    href = url\n    if '://' not in href:\n        href = 'http://' + href\n    return '&lt;a href=\"%s\"&gt;%s&lt;/a&gt;' % (href, url)\n\nparser = bbcode.Parser(linker=my_linker)\nparser.format('www.apple.com') # returns &lt;a href=\"http://www.apple.com\"&gt;www.apple.com&lt;/a&gt;\n</code></pre> <p>For an example of a linker that may want the render context, imagine a linker that routes all clicks through a local URL:</p> <pre><code>def my_linker(url, context):\n    href = url\n    if '://' not in href:\n        href = 'http://' + href\n    redir_url = context['request'].build_absolute_url('/redirect/') + '?to=' + urllib.quote(href, safe='/')\n    return '&lt;a href=\"%s\"&gt;%s&lt;/a&gt;' % (redir_url, url)\n\nparser = bbcode.Parser(linker=my_linker, linker_takes_context=True)\nparser.format('www.apple.com', request=request)\n</code></pre>"},{"location":"formatters/","title":"Formatters","text":""},{"location":"formatters/#advanced-tag-formatters","title":"Advanced Tag Formatters","text":"<p>Simple formatters are great for basic string substitution tags. But if you need to handle tag options, or have access to the parser context or parent tag, you can write a formatter function that returns whatever HTML you like:</p> <pre><code># A custom render function that uses the tag name as a color style.\ndef render_color(tag_name, value, options, parent, context):\n    return '&lt;span style=\"color:%s;\"&gt;%s&lt;/span&gt;' % (tag_name, value)\n\n# Installing advanced formatters.\nfor color in ('red', 'blue', 'green', 'yellow', 'black', 'white'):\n    parser.add_formatter(color, render_color)\n</code></pre>"},{"location":"formatters/#advanced-quote-example","title":"Advanced Quote Example","text":"<p>Suppose you want to support an author option on your quote tags. Your formatting function might look something like this:</p> <pre><code>def render_quote(tag_name, value, options, parent, context):\n    author = u''\n    # [quote author=Somebody]\n    if 'author' in options:\n        author = options['author']\n    # [quote=Somebody]\n    elif 'quote' in options:\n        author = options['quote']\n    # [quote Somebody]\n    elif len(options) == 1:\n        key, val = list(options.items())[0]\n        if val:\n            author = val\n        elif key:\n            author = key\n    # [quote Firstname Lastname]\n    elif options:\n        author = ' '.join([k for k in options.keys()])\n    extra = '&lt;small&gt;%s&lt;/small&gt;' % author if author else ''\n    return '&lt;blockquote&gt;&lt;p&gt;%s&lt;/p&gt;%s&lt;/blockquote&gt;' % (value, extra)\n\n# Now register our new quote tag, telling it to strip off whitespace, and the newline after the [/quote].\nparser.add_formatter('quote', render_quote, strip=True, swallow_trailing_newline=True)\n</code></pre>"},{"location":"formatters/#custom-tag-options","title":"Custom Tag Options","text":"<p>When registering a formatter (simple or advanced), you may pass several keyword options for controlling the parsing and rendering behavior.</p> <ul> <li><code>newline_closes=False</code> - True if a newline should automatically close this tag.</li> <li><code>same_tag_closes=False</code> - True if another start of the same tag should automatically close this tag.</li> <li><code>standalone=False</code> - True if this tag does not have a closing tag.</li> <li><code>render_embedded=True</code> - True if tags should be rendered inside this tag.</li> <li><code>transform_newlines=True</code> - True if newlines should be converted to markup.</li> <li><code>escape_html=True</code> - True if HTML characters (&lt;, &gt;, and &amp;) should be escaped inside this tag.</li> <li><code>replace_links=True</code> - True if URLs should be replaced with link markup inside this tag.</li> <li><code>replace_cosmetic=True</code> - True if cosmetic replacements (elipses, dashes, etc.) should be performed inside this tag.</li> <li><code>strip=False</code> - True if leading and trailing whitespace should be stripped inside this tag.</li> <li><code>swallow_trailing_newline=False</code> - True if this tag should swallow the first trailing newline (i.e. for block   elements).</li> </ul>"},{"location":"tags/","title":"Built-In Tags","text":"<p>Below are the tag formatters that are built into <code>bbcode</code> by default:</p> Tag Input Output b [b]test[/b] <code>&lt;strong&gt;test&lt;/strong&gt;</code> i [i]test[/i] <code>&lt;em&gt;test&lt;/em&gt;</code> u [u]test[/u] <code>&lt;u&gt;test&lt;/u&gt;</code> s [s]test[/s] <code>&lt;strike&gt;test&lt;/strike&gt;</code> hr [hr] <code>&lt;hr /&gt;</code> sub x[sub]3[/sub] <code>x&lt;sub&gt;3&lt;/sub&gt;</code> sup x[sup]3[/sup] <code>x&lt;sup&gt;3&lt;/sup&gt;</code> list/* [list][*] item[/list] <code>&lt;ul&gt;&lt;li&gt;item&lt;/li&gt;&lt;/ul&gt;</code> quote [quote]hello[/quote] <code>&lt;blockquote&gt;hello&lt;/blockquote&gt;</code> code [code]x = 3[/code] <code>&lt;code&gt;x = 3&lt;/code&gt;</code> center [center]hello[/center] <code>&lt;div style=\"text-align:center;\"&gt;hello&lt;/div&gt;</code> color [color=red]red[/color] <code>&lt;span style=\"color:red;\"&gt;red&lt;/span&gt;</code> url [url=www.apple.com]Apple[/url] <code>&lt;a href=\"http://www.apple.com\"&gt;Apple&lt;/a&gt;</code>"}]}